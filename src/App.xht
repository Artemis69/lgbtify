<script>
import { flags } from './lib/flags'

const canvas = document.createElement('canvas');
let output = '', avatar = '', avatarFileName = '';

const drawCanvas = (picture) => {
    if(!avatar) return

    const image = document.createElement('img');

    image.addEventListener('load', () => {

        canvas.width = image.width;
        canvas.height = image.height;

        const ctx = canvas.getContext("2d");

        if(!ctx) return

        ctx.clearRect(0, 0, canvas.width, canvas.height)
        ctx.drawImage(image, 0, 0);

        const flag = document.createElement('img')

        flag.addEventListener('load', () => {
            ctx.globalAlpha = 0.6;
            ctx.drawImage(flag, 0, 0, image.width, image.height);

            if(output) URL.revokeObjectURL(output)

            canvas.toBlob(blob => output = URL.createObjectURL(blob), 'image/png', 1.0);
        })

        flag.src = picture;
 
    }, false);

    image.src = avatar;
}

const readFile = (e, setAvatar) => new Promise(resolve => {
    const file = e.target.files[0]

    if (!file) return;

    if(setAvatar) avatarFileName = file.name.split('.').slice(0, -1).join('')
    
    const reader = new FileReader();

    reader.addEventListener('load', e => resolve(e.target.result))

    reader.readAsDataURL(file);
});

const onAvatarUpload = async (event) => {
    avatar = await readFile(event, true);
    drawCanvas('data:image/svg+xml,' + flags[1])
};

const onPictureUpload = async (event) => drawCanvas(await readFile(event));

</script>

<div class="flex flex-col items-center justify-center">
    <label for="avatar-select" class="bg-white border rounded cursor-pointer flex flex-col border-gray-200 shadow my-5 mx-4 tracking-wide py-6 px-4 text-dark-100 w-56 items-center uppercase dark:bg-dark-200 dark:border-dark-50 dark:text-light-100 hover:bg-light-200 hover:text-dark-200 dark:hover:bg-dark-300 dark:hover:text-light-200 focus-within:outline-solid-gray-900 focus-within:dark:outline-solid-light-100">
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4.75 14.75V16.25C4.75 17.9069 6.09315 19.25 7.75 19.25H16.25C17.9069 19.25 19.25 17.9069 19.25 16.25V14.75"></path>
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 14.25L12 5"></path>
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8.75 8.25L12 4.75L15.25 8.25"></path>
        </svg>
        <span class="mt-2 text-base leading-normal">Select a file</span>
        <input
            id="avatar-select"
            class="h-px w-px opacity-0 select-none"
            type="file"
            accept="image/png, image/jpeg, image/svg+xml, image/webp"
            @change:onAvatarUpload
        />
    </label>
    <p class="text-lg py-4 px-2">Select a flag:</p>
    <div class="grid gap-2 grid-cols-2 xl:flex xl:flex-row items-center justify-between">
        {#each flags as flag}
            <button class="rounded h-24 shadow max-w-36 filter focus:outline-solid-gray-900 dark:focus:outline-solid-light-100 hover:brightness-95 focus:brightness-90" @click={drawCanvas('data:image/svg+xml,' + flag)}>
                <img class="rounded object-cover h-24 max-w-36" src="data:image/svg+xml,{flag}" alt="flag">
            </button>
        {/each}
        {#if avatar}
            <label for="flag-select" class="bg-white border rounded cursor-pointer flex flex-col border-gray-200 h-24 shadow text-center tracking-wide text-dark-100 w-36 items-center justify-center uppercase dark:bg-dark-200 dark:border-dark-50 dark:text-light-100 hover:bg-light-200 dark:hover:bg-dark-300 hover:text-dark-200 dark:hover:text-light-200 focus-within:outline-solid-gray-900 focus-within:dark:outline-solid-light-100">
                <span class="text-base leading-normal">From gallery</span>
                <input
                    id="flag-select"
                    class="h-px w-px opacity-0 select-none"
                    type="file"
                    accept="image/png, image/jpeg, image/svg+xml, image/webp"
                    @change:onPictureUpload
                />
             </label>
        {/if}
    </div>
</div>

<div class="flex flex-col mt-16 pb-16 w-2/3 items-center justify-center md:w-96 lg:mt-0 lg:pb-0">
    {#if output}
        <img src={output} alt="Avatar with an overlay picture">
        <a class="rounded-md font-medium bg-gray-900 shadow my-3 leading-snug py-2 px-4 text-gray-200 dark:focus:outline-solid-light-100 dark:bg-dark-100 hover:bg-gray-800 dark:hover:bg-dark-50" href={output} download="{avatarFileName}-{output.split('/')[3] || ''}.png">Download</a>
    {/if}
</div>
